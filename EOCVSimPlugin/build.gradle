import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'com.gradleup.shadow' version '8.3.5'
    id 'signing'
    id "com.vanniktech.maven.publish"
}

apply from: '../build.common.gradle'

components.java {
    tasks.named("shadowJar").configure {
        // only run shadowJar when explicitly specified by the user
        // check if user invoked gradle with :shadowJar
        enabled = project.gradle.startParameter.taskNames.contains("shadowJar")
    }
}

tasks.register('generatePluginToml') {
    // Use layout.buildDirectory for the output directory
    def outputFile = layout.buildDirectory.file("resources/main/plugin.toml")

    outputFile.get().asFile.delete()
    outputs.file(outputFile) // Mark this file as an output of the task

    doLast {
        def templateFile = new File(project.projectDir, "src/main/plugin.toml")

        // Read the template file
        def template = templateFile.text

        // Replace the placeholder with the project version
        def replaced = template.replace("{{version}}", project.version.toString())

        // Write to the output file
        outputFile.get().asFile.parentFile.mkdirs() // Ensure the directory exists
        outputFile.get().asFile.text = replaced
    }
}

tasks.register('signPlugin') {
    doLast {
        // Get the key from an environment variable
        def signingKey = System.getenv('PLUGINSIGNING_PRIVATE')
        if (!signingKey) {
            signingKey = findProperty('pluginSigningPrivate')
            if(!signingKey) {
                println("Environment variable 'PLUGINSIGNING_PRIVATE' is not set.")
                // up to date, nothing to do
                return
            }
        }

        // Determine the correct JAR file to sign
        def jarFile = tasks.named("jar").get().archiveFile.get().asFile

        // Use the shadowJAR file if it's enabled and available
        def shadowJarTask = tasks.named("shadowJar").get()
        if (shadowJarTask && shadowJarTask.enabled) {
            jarFile = shadowJarTask.archiveFile.get().asFile
        }

        def commonJarPath = rootDir.absolutePath + File.separator + "tools" + File.separator + "Common.jar"

        println("Signing plugin. Using common jar: ${commonJarPath} and plugin jar: ${jarFile}")

        def exitValue = project.exec {
            commandLine 'java',
                    '-classpath', commonJarPath,
                    'io.github.deltacv.eocvsim.plugin.security.PluginSigningTool',
                    "--plugin=${jarFile}",
                    '--authority=deltacv',
                    "--key=$signingKey"
        }.assertNormalExitValue()
    }
}

// Ensure signPlugin runs after jar or shadowJar tasks
tasks.named("jar").configure {
    finalizedBy signPlugin
}

tasks.named("shadowJar").configure {
    finalizedBy signPlugin
}

// Ensure signPlugin runs after the JAR tasks are complete
tasks.named("signPlugin").configure {
    if(tasks.named("shadowJar").get().enabled) {
        dependsOn shadowJar
    } else {
        dependsOn jar
    }
}

tasks.named("processResources").configure {
    dependsOn generatePluginToml
}

// Maven metadata task should depend on signPlugin if it exists
tasks.configureEach {
    if (name == "generateMetadataFileForMavenPublication") {
        dependsOn signPlugin
    }
}

shadowJar {
    configurations = [project.configurations.runtimeClasspath]

    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}

configurations.configureEach {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

tasks.withType(Jar).configureEach {
    manifest {
        attributes['Main-Class'] = 'io.github.deltacv.papervision.plugin.EOCVSimIpcPaperVisionMain'
    }
}

shadowJar {
    exclude "nu/pattern/*"
    exclude "*.so"
    exclude "*.dylib"
    exclude "*.dll"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation project(":LwjglPlatform")

    compileOnly('org.deltacv.EOCV-Sim:EOCV-Sim:4.0.1') { transitive = false }
    compileOnly('org.deltacv.EOCV-Sim:Common:4.0.1') { transitive = false }
    compileOnly('org.deltacv.EOCV-Sim:Vision:4.0.1')

    implementation 'org.codehaus.janino:janino:3.1.12'
    implementation "com.google.code.gson:gson:$gson_version"
    implementation 'org.java-websocket:Java-WebSocket:1.5.7'
    implementation 'info.picocli:picocli:4.7.6'
    implementation "ch.qos.logback:logback-classic:$logback_classic_version"

    implementation('org.deltacv.visionloop:visionloop:1.2.5') {
        exclude group: 'org.jetbrains.skiko'
        exclude group: 'org.deltacv'
        exclude group: 'org.deltacv.EOCVSim'
        exclude group: 'org.deltacv.steve'
        exclude group: 'org.openpnp'
    }
    implementation('org.deltacv.visionloop:streaming:1.2.5') {
        exclude group: 'org.jetbrains.skiko'
        exclude group: 'org.deltacv'
        exclude group: 'org.deltacv.EOCVSim'
        exclude group: 'org.deltacv.steve'
        exclude group: 'org.openpnp'
    }

    implementation("io.javalin:javalin:6.3.0")
    implementation 'commons-io:commons-io:2.17.0'
}