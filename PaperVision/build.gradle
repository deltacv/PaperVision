import java.nio.file.Paths
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'com.google.devtools.ksp' version '2.0.20-1.0.24'
    id 'org.jetbrains.kotlin.jvm'
    id 'signing'
    id "com.vanniktech.maven.publish"
}

apply from: '../build.common.gradle'

dependencies {
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"

    compileOnly "io.github.spair:imgui-java-binding:$imgui_version" // platforms should add the "implementation" they need

    api "org.slf4j:slf4j-api:$slf4j_version"

    api 'org.deltacv:mai18n:1.1.5'

    implementation "org.java-websocket:Java-WebSocket:1.5.2"

    implementation "com.google.code.gson:gson:$gson_version"
    implementation "io.github.classgraph:classgraph:$classgraph_version"

    implementation 'ome:turbojpeg:8.3.0'

    api project(":Shared")
    ksp project(":PaperVision:NodeAnnotationProcessor")
}

ksp {
    arg("paperNodeClassesMetadataPackage", "io.github.deltacv.papervision.node")
    arg("paperNodeClassesMetadataClassName", "PaperNodeClassesMetadata")
}

tasks.register('writeBuildClassJava') {
    String date = DateTimeFormatter.ofPattern("yyyy-M-d hh:mm:ss").format(LocalDateTime.now())

    File versionFile = Paths.get(
            projectDir.absolutePath, 'src', 'main', 'kotlin',
            'io', 'github', 'deltacv', 'papervision', 'Build.kt'
    ).toFile()

    versionFile.delete()

    versionFile << "package io.github.deltacv.papervision\n" +
            "\n" +
            "/*\n" +
            " * Autogenerated file! Do not manually edit this file, as\n" +
            " * it is regenerated any time the build task is run.\n" +
            " *\n" +
            " * Based from PhotonVision PhotonVersion generator task\n" +
            " */\n" +
            "@Suppress(\"UNUSED\")\n" +
            "object Build {\n" +
            "    const val VERSION_STRING = \"$version\";\n" +
            "    const val STANDARD_VERSION_STRING = \"$standardVersion\";\n" +
            "    const val BUILD_DATE = \"$date\";\n" +
            "    const val IS_DEV = ${version.contains("dev")};\n" +
            "}"
}

build.dependsOn writeBuildClassJava
