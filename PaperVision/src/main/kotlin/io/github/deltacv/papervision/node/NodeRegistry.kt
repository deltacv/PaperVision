/*
 * PaperVision
 * Copyright (C) 2024 Sebastian Erives, deltacv

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package io.github.deltacv.papervision.node

import io.github.deltacv.papervision.gui.CategorizedNodes
import io.github.deltacv.papervision.util.hasSuperclass

@Suppress("UNCHECKED_CAST")
object NodeRegistry {

    /**
     * Openly mutable map of categorized nodes used to register nodes.
     * Registered nodes will automatically be available in the editor list.
     */
    val nodes: CategorizedNodes = mutableMapOf()

    init {
        // Register nodes from metadata generated by KSP - NodeAnnotationProcessor
        fromMetadataClasslist(PaperNodeClassesMetadata.classList)
    }

    fun fromMetadataClasslist(classList: List<String>) {
        for (className in classList) {
            val clazz = NodeRegistry::class.java.classLoader.loadClass(className)
            val regAnnotation = clazz.getDeclaredAnnotation(PaperNode::class.java)

            if (clazz.hasSuperclass(Node::class.java)) {
                val nodeClazz = clazz as Class<out Node<*>>
                registerNode(nodeClazz, regAnnotation.category)
            }
        }
    }

    fun registerNode(nodeClass: Class<out Node<*>>, category: Category) {
        val list = nodes[category]

        val mutableNodes = nodes as MutableMap

        if (list == null) {
            mutableNodes[category] = mutableListOf(nodeClass)
        } else {
            list.add(nodeClass)
        }
    }

}