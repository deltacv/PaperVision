import java.nio.file.Paths
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    ext {
        kotlin_version = "2.0.20"
        kotlinx_coroutines_version = "1.8.1"
        classgraph_version = "4.8.108"
        imgui_version = "1.87.6"
        gson_version = "2.8.9"
        lwjgl_version = "3.3.2"

        slf4j_version = "2.0.16"
        log4j_version = "2.24.0"
        logback_classic_version = "1.5.8"

        Penv = findProperty('env')
        if(Penv != null && (Penv != 'dev' && Penv != 'release')) {
            throw new GradleException("Invalid env property, must be 'dev' or 'release'")
        }

        env = Penv == 'release' ? 'release' : 'dev'

        println("Current build is: $env")
    }

    repositories {
        mavenCentral()
        google()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.30.0'
    }
}

allprojects {
    group 'org.deltacv.PaperVision'
    version '1.0.6'

    ext {
        standardVersion = version
    }

    repositories {
        mavenCentral()
        google()
        maven { url "https://maven.pkg.jetbrains.space/public/p/compose/dev" }
    }

    if(env == 'dev') {
        String date = DateTimeFormatter.ofPattern(
                "yyMMdd-HHmm"
        ).format(LocalDateTime.now())

        String hash = findProperty('hash')

        version += "-dev-${hash ?: date}"
        println("Final version of ${project} is $version")

        File libsFolder = Paths.get(
                projectDir.absolutePath, 'build', 'libs'
        ).toFile()

        for(file in libsFolder.listFiles()) {
            if(file.name.contains("dev") && file.name.endsWith(".jar"))
                file.delete()
        }
    }
}
